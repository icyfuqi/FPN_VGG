name: "VGG_ILSVRC_16"

input: "data"
input_dim: 1
input_dim: 3
input_dim: 224
input_dim: 224

input: "labels"
input_dim: 1 		# to be changed on-the-fly to match input dim
input_dim: 9        # 9(anchors)        
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim

input: "labels_weights"
input_dim: 1 		# to be changed on-the-fly to match input dim
input_dim: 9        # 9(anchors)        
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim

input: "bbox_targets"
input_dim: 1  		# to be changed on-the-fly to match input dim
input_dim: 36  		# 4 * 9(anchors) 
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim

input: "bbox_loss_weights"
input_dim: 1  		# to be changed on-the-fly to match input dim
input_dim: 36  		# 4 * 9(anchors) 
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim
input_dim: 14  		# size for 224 input image, to be changed on-the-fly to match input dim


layer {
	bottom: "data"
	top: "conv1_1"
	name: "conv1_1"
	type: "Convolution"
	param {
		lr_mult: 0.0
	}
	param {
		lr_mult: 0.0
	}
	convolution_param {
		num_output: 64
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv1_1"
	top: "conv1_1"
	name: "relu1_1"
	type: "ReLU"
}

layer {
	bottom: "conv1_1"
	top: "conv1_2"
	name: "conv1_2"
	param {
		lr_mult: 0.0
	}
	param {
		lr_mult: 0.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 64
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv1_2"
	top: "conv1_2"
	name: "relu1_2"
	type: "ReLU"
}

layer {
	bottom: "conv1_2"
	top: "pool1"
	name: "pool1"
	type: "Pooling"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}

layer {
	bottom: "pool1"
	top: "conv2_1"
	name: "conv2_1"
	param {
		lr_mult: 0.0
	}
	param {
		lr_mult: 0.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 128
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv2_1"
	top: "conv2_1"
	name: "relu2_1"
	type: "ReLU"
}

layer {
	bottom: "conv2_1"
	top: "conv2_2"
	name: "conv2_2"
	param {
		lr_mult: 0.0
	}
	param {
		lr_mult: 0.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 128
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv2_2"
	top: "conv2_2"
	name: "relu2_2"
	type: "ReLU"
}

layer {
	bottom: "conv2_2"
	top: "pool2"
	name: "pool2"
	type: "Pooling"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}

layer {
	bottom: "pool2"
	top: "conv3_1"
	name: "conv3_1"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv3_1"
	top: "conv3_1"
	name: "relu3_1"
	type: "ReLU"
}

layer {
	bottom: "conv3_1"
	top: "conv3_2"
	name: "conv3_2"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv3_2"
	top: "conv3_2"
	name: "relu3_2"
	type: "ReLU"
}

layer {
	bottom: "conv3_2"
	top: "conv3_3"
	name: "conv3_3"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv3_3"
	top: "conv3_3"
	name: "relu3_3"
	type: "ReLU"
}

layer {
	bottom: "conv3_3"
	top: "pool3"
	name: "pool3"
	type: "Pooling"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}

layer {
	bottom: "pool3"
	top: "conv4_1"
	name: "conv4_1"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv4_1"
	top: "conv4_1"
	name: "relu4_1"
	type: "ReLU"
}

layer {
	bottom: "conv4_1"
	top: "conv4_2"
	name: "conv4_2"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv4_2"
	top: "conv4_2"
	name: "relu4_2"
	type: "ReLU"
}

layer {
	bottom: "conv4_2"
	top: "conv4_3"
	name: "conv4_3"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv4_3"
	top: "conv4_3"
	name: "relu4_3"
	type: "ReLU"
}

layer {
	bottom: "conv4_3"
	top: "pool4"
	name: "pool4"
	type: "Pooling"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}

layer {
	bottom: "pool4"
	top: "conv5_1"
	name: "conv5_1"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv5_1"
	top: "conv5_1"
	name: "relu5_1"
	type: "ReLU"
}

layer {
	bottom: "conv5_1"
	top: "conv5_2"
	name: "conv5_2"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv5_2"
	top: "conv5_2"
	name: "relu5_2"
	type: "ReLU"
}

layer {
	bottom: "conv5_2"
	top: "conv5_3"
	name: "conv5_3"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 512
		pad: 1
		kernel_size: 3
	}
}

layer {
	bottom: "conv5_3"
	top: "conv5_3"
	name: "relu5_3"
	type: "ReLU"
}

#-----------------------layer +-------------------------
#-----pool5:(14-2+2*0)/2+1=7-----7*7*512-----
layer {
	bottom: "conv5_3"
	top: "pool5"
	name: "pool5"
	type: "Pooling"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}
#-----pool5=C5(7*7*512)---------conv:(1*1*512)*256-----P5(7*7*256)-----deconv-----upP5(14*14*256)-----
#-----pool5=C5----->P5-----P5:(7-1+2*0)/1+1=7-----7*7*256-----
layer {
	bottom: "pool5"
	top: "P5"
	name: "P5"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		kernel_size: 1
		weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
	}
}
#-----P5----->upP5-----upP5:(7-1)*2-2*1+4=14-----14*14*256-----
layer {
    name: "upP5"
	type: "Deconvolution"
    bottom: "P5" 
	top: "upP5"
	param {
	    lr_mult: 0
	    decay_mult: 0
	}
    convolution_param {
        kernel_size: 4       #{{2 * factor - factor % 2}},factor=2 
  	    stride: 2            #{{factor}},factor=2
        num_output: 256 
        pad: 1               #{{ceil((factor - 1) / 2.)}},factor=2
        weight_filler: { 
		    type: "bilinear" 
		} 
	    bias_term: false
    }
}
#-----conv5_3=C4(14*14*512)-----conv:(1*1*512)*256-----newC4(14*14*256)-----elmwise(+)-----upP5(14*14*256)-----P4(14*14*256)-----deconv-----upP4(28*28*256)-----
#-----conv5_3=C4----->newC4-----newC4:(14-1+2*0)/1+1=14-----14*14*256-----
layer {
	bottom: "conv5_3"
	top: "newC4"
	name: "newC4"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		kernel_size: 1
		weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
	}
}
#-----upP5----->upP5crop-----
layer {
    name: "upP5crop"
    type: "Crop"
	bottom: "upP5"
    bottom: "newC4"
    top: "upP5crop"
    crop_param {
        axis: 2
        offset: 0
    }
}
#-----newC4+upP5----->P4-----P4:14*14*256-----
layer {
    name: "P4"
    type: "Eltwise"
    bottom: "newC4"
    bottom: "upP5crop"
    top: "P4"
    eltwise_param {
        operation: SUM
    }
}
#-----------------------P4/P3/P2(merged map)-------------------------
#-----P4(14*14*256)-----conv:(3*3*256)*256-----newP4(14*14*256)-----删除
layer {
	bottom: "P4"
	top: "newP4"
	name: "newP4"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
	type: "Convolution"
	convolution_param {
		num_output: 256
		pad: 1
		kernel_size: 3
		weight_filler {
            type: "xavier"
        }
        bias_filler {
            type: "constant"
        }
	}
}
#----------------------layer +-------------------------
layer {
   name: "conv_proposal1"
   type: "Convolution"
   bottom: "newP4"
   top: "conv_proposal1"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
   convolution_param{
	   num_output: 512
	   kernel_size: 3
	   pad: 1
	   stride: 1
	   weight_filler {
		 type: "gaussian"
		 std: 0.01
	   }
	   bias_filler {
		 type: "constant"
		 value: 0
	   }
   }
}

layer {
   name: "relu_proposal1"
   type: "ReLU"
   bottom: "conv_proposal1"
   top: "conv_proposal1"
}

layer {
   name: "proposal_cls_score"
   type: "Convolution"
   bottom: "conv_proposal1"
   top: "proposal_cls_score"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
   convolution_param{
	   num_output: 18   # 2(bg/fg) * 9(anchors) 
	   kernel_size: 1
	   pad: 0
	   stride: 1
	   weight_filler {
		 type: "gaussian"
		 std: 0.01
	   }
	   bias_filler {
		 type: "constant"
		 value: 0
	   }
   }
}

layer {
   name: "proposal_bbox_pred"
   type: "Convolution"
   bottom: "conv_proposal1"
   top: "proposal_bbox_pred"
	param {
		lr_mult: 1.0
	}
	param {
		lr_mult: 2.0
	}
   convolution_param{
	   num_output: 36	# 4 * 9(anchors) 
	   kernel_size: 1
	   pad: 0
	   stride: 1
	   weight_filler {
		 type: "gaussian"
		 std: 0.01
	   }
	   bias_filler {
		 type: "constant"
		 value: 0
	   }
   }
}

#-----------------------output------------------------

# to enable the calculation of softmax loss, we first reshape blobs related to SoftmaxWithLoss
layer {
   bottom: "proposal_cls_score"
   top: "proposal_cls_score_reshape"
   name: "proposal_cls_score_reshape"
   type: "Reshape"
   reshape_param{
	   shape {
			dim: 0 
			dim: 2
			dim: -1 
			dim: 0
		}
	}
}

layer {
   bottom: "labels"
   top: "labels_reshape"
   name: "labels_reshape"
   type: "Reshape"
   reshape_param{
	   shape {
			dim: 0 
			dim: 1
			dim: -1 
			dim: 0
		}
	}
}

layer {
   bottom: "labels_weights"
   top: "labels_weights_reshape"
   name: "labels_weights_reshape"
   type: "Reshape"
   reshape_param{
	   shape {
			dim: 0 
			dim: 1
			dim: -1 
			dim: 0
		}
	}
}

layer {
   name: "loss"
   type: "SoftmaxWithLoss"
   bottom: "proposal_cls_score_reshape"
   bottom: "labels_reshape"
   bottom: "labels_weights_reshape"
   top: "loss_cls"
   loss_weight: 1
}

layer {
   name: "accuarcy"
   type: "Accuracy"
   bottom: "proposal_cls_score_reshape"
   bottom: "labels_reshape"
   top: "accuarcy"
}

layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "proposal_bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_loss_weights"
  top: "loss_bbox"
  loss_weight: 10
}
